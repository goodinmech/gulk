{
  "name": "inky",
  "version": "1.3.4",
  "description": "Convert a simple HTML syntax into tables compatible with Foundation for Emails.",
  "author": {
    "name": "ZURB",
    "email": "foundation@zurb.com",
    "url": "http://foundation.zurb.com"
  },
  "keywords": [
    "ink",
    "foundation",
    "email",
    "template"
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha --compilers js:babel-register"
  },
  "dependencies": {
    "cheerio": "^0.20.0",
    "foundation-emails": "^2.0.0-rc.4",
    "mkdirp": "^0.5.1",
    "multiline": "^1.0.2",
    "object-values": "^1.0.0",
    "through2": "^2.0.0",
    "vinyl-fs": "^2.3.0"
  },
  "devDependencies": {
    "assert-html-equal": "^1.0.0",
    "babel-preset-es2015": "^6.3.13",
    "babel-register": "^6.4.3",
    "chalk": "^1.1.1",
    "mocha": "^2.4.5",
    "rimraf": "^2.5.1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zurb/inky.git"
  },
  "bugs": {
    "url": "https://github.com/zurb/inky/issues"
  },
  "license": "MIT",
  "gitHead": "2b56d04f2199c338f5f367e688c7d289b3380f23",
  "readme": "# Inky\r\n\r\n[![Build Status](https://travis-ci.org/zurb/inky.svg?branch=master)](https://travis-ci.org/zurb/inky) [![npm version](https://badge.fury.io/js/inky.svg)](https://badge.fury.io/js/inky)\r\n\r\nInky is an HTML-based templating language that converts simple HTML into complex, responsive email-ready HTML. Designed for [Foundation for Emails](http://foundation.zurb.com/emails), a responsive email framework from [ZURB](http://zurb.com).\r\n\r\nGive Inky simple HTML like this:\r\n\r\n```html\r\n<row>\r\n  <columns large=\"6\"></columns>\r\n  <columns large=\"6\"></columns>\r\n</row>\r\n```\r\n\r\nAnd get complicated, but battle-tested, email-ready HTML like this:\r\n\r\n```html\r\n<table class=\"row\">\r\n  <tbody>\r\n    <tr>\r\n      <th class=\"small-12 large-6 columns first\">\r\n        <table>\r\n          <tr>\r\n            <th class=\"expander\"></th>\r\n          </tr>\r\n        </table>\r\n      </th>\r\n      <th class=\"small-12 large-6 columns first\">\r\n        <table>\r\n          <tr>\r\n            <th class=\"expander\"></th>\r\n          </tr>\r\n        </table>\r\n      </th>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install inky --save-dev\r\n```\r\n\r\n## Usage\r\n\r\nInky can be used standalone, as a Gulp plugin, or with a CLI. You can also access the `Inky` parser class directly.\r\n\r\n### Standalone\r\n\r\n```js\r\nvar inky = require('inky');\r\n\r\ninky({\r\n  src: 'src/pages/**/*.html',\r\n  dest: 'dist'\r\n}, function() {\r\n  console.log('Done parsing.');\r\n});\r\n```\r\n\r\n### With Gulp\r\n\r\n```js\r\nvar inky = require('inky')\r\n\r\nfunction parse() {\r\n  gulp.src('src/pages/**/*.html')\r\n    .pipe(inky())\r\n    .pipe(gulp.dest('dist'));\r\n}\r\n```\r\n\r\n### Command Line\r\n\r\nInstall [inky-cli](https://github.com/zurb/inky-cli) to get the `inky` command. The first option is a glob of input files, and the second option is a folder to output them to. Add the `--watch` flag to re-compile when files are added or changed.\r\n\r\n```bash\r\nnpm install inky-cli --global\r\ninky src/pages/**/*.html dist --watch\r\n```\r\n\r\nDoesn't support advanced settings at the moment.\r\n\r\n## Plugin Settings\r\n\r\n- `src` (String): Glob of files to process. You don't need to supply this when using Inky with Gulp.\r\n- `dest` (String): Folder to output processed files to. You don't need to supply this when using Inky with Gulp.\r\n- `components` (Object): Tag names for custom components. See [custom components](#custom-components) below to learn more.\r\n- `columnCount` (Number): Column count for the grid. Make sure your Foundation for Emails project has the same column count in the Sass as well.\r\n- `cheerio` (Object): cheerio settings (for available options please refer to [cheerio project at github](https://github.com/cheeriojs/cheerio)).\r\n\r\n## Custom Elements\r\n\r\nInky simplifies the process of creating HTML emails by expanding out simple tags like `<row>` and `<column>` into full table syntax. The names of the tags can be changed with the `components` setting.\r\n\r\nHere are the names of the defaults:\r\n\r\n```js\r\n{\r\n  button: 'button',\r\n  row: 'row',\r\n  columns: 'columns',\r\n  container: 'container',\r\n  inky: 'inky',\r\n  blockGrid: 'block-grid',\r\n  menu: 'menu',\r\n  menuItem: 'item'\r\n}\r\n```\r\n\r\n## Programmatic Use\r\n\r\nThe Inky parser can be accessed directly for programmatic use. It takes in a [Cheerio](https://github.com/cheeriojs/cheerio) object of HTML, and gives you back a converted Cheerio object.\r\n\r\n```js\r\nvar Inky = require('inky').Inky;\r\nvar cheerio = require('cheerio');\r\n\r\nvar options = {};\r\nvar input = '<row></row>';\r\n\r\n// The same plugin settings are passed in the constructor\r\nvar i = new Inky(options);\r\nvar html = cheerio.load(input)\r\n\r\n// Now unleash the fury\r\nvar convertedHtml = i.releaseTheKraken(html);\r\n\r\n// The return value is a Cheerio object. Get the string value with .html()\r\nconvertedHtml.html();\r\n```\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/zurb/inky#readme",
  "_id": "inky@1.3.4",
  "_shasum": "7e5a724ab7ff09ba2266961388b1d31fdae3a9d3",
  "_from": "zurb/inky",
  "_resolved": "git://github.com/zurb/inky.git#2b56d04f2199c338f5f367e688c7d289b3380f23"
}
